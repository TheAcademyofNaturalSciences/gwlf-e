from gwlfe.AFOS.GrazingAnimals.Losses.GRStreamN import AvGRStreamN
from gwlfe.AFOS.GrazingAnimals.Losses.GRStreamN import AvGRStreamN_f

<<<<<<< HEAD
def NFENCING(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN, n42, n45, n69):
    grsn = AvGRStreamN(PctStreams,PctGrazing,GrazingAnimal_0,NumAnimals,AvgAnimalWt,AnimalDailyN)
    if n42 > 0:# based on the code, n42 is always > 0 (may not need to check
=======

def NFENCING(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN, n42, n45, n69):
    grsn = AvGRStreamN(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN)
    if n42 > 0:  # based on the code, n42 is always > 0 (may not need to check
>>>>>>> fixfixNumpyImports
        result = (n45 / n42) * n69 * grsn
    else:
        result = 0  # TODO: the code does not have this fall back, would have error if n42 <= 0
    return result


<<<<<<< HEAD
def NFENCING_f(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN,n42,n45,n69):
    if n42 > 0:  # based on the code, n42 is always > 0 (may not need to check
        grsn = AvGRStreamN_f(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN)
=======
def NFENCING_2(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN, n42, n45, n69):
    if n42 > 0:  # based on the code, n42 is always > 0 (may not need to check
        grsn = AvGRStreamN_2(PctStreams, PctGrazing, GrazingAnimal_0, NumAnimals, AvgAnimalWt, AnimalDailyN)
>>>>>>> fixfixNumpyImports
        return (n45 / n42) * n69 * grsn
    else:
        return 0  # TODO: the code does not have this fall back, would have error if n42 <= 0
